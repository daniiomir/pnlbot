from __future__ import annotations

import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from bot.db.base import session_scope
from bot.db.models import Channel, User
from bot.keyboards.channels import channels_main_menu_kb, channel_actions_kb, channels_inline_menu_kb
from bot.services.time import now_msk
from bot.services.channel_stats import collect_for_channel

logger = logging.getLogger()

router = Router()


@router.message(Command("channels"))
async def cmd_channels(message: Message) -> None:
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:", reply_markup=channels_inline_menu_kb())


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def ask_forward(message: Message) -> None:
    await message.answer(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n"
        "–ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ —Ç–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç–∞ (Telethon session) –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏).",
        parse_mode="HTML",
    )


@router.message(F.forward_from_chat)
async def handle_forwarded_post(message: Message) -> None:
    fwd = message.forward_from_chat
    if fwd is None:
        return
    tg_chat_id = fwd.id
    title = fwd.title
    username = fwd.username

    added_by_user_id = message.from_user.id if message.from_user else None
    with session_scope() as s:
        existing = s.query(Channel).filter(Channel.tg_chat_id == tg_chat_id).one_or_none()
        if existing:
            existing.title = existing.title or title
            existing.username = existing.username or username
            existing.is_active = True
            existing.last_error = None
            existing.last_success_at = now_msk()
            s.flush()
            ch_id = existing.id
        else:
            ch = Channel(
                tg_chat_id=tg_chat_id,
                title=title,
                username=username,
                created_at=now_msk(),
                is_active=True,
                last_success_at=None,
                last_error=None,
                added_by_user_id=None,
            )
            # Resolve added_by_user_id to DB user
            if added_by_user_id is not None:
                user = s.query(User).filter(User.tg_user_id == added_by_user_id).one_or_none()
                if user is not None:
                    ch.added_by_user_id = user.id
            s.add(ch)
            s.flush()
            ch_id = ch.id

    # Trigger immediate stats collection for this channel
    try:
        res = await collect_for_channel(ch_id, tg_chat_id, now_msk())
        await message.answer(
            f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {title or username or tg_chat_id}\n"
            f"–°–±–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏ –ø–æ—Å—Ç—ã (72—á).\n"
            f"‚ö†Ô∏è –ù–∞–∑–Ω–∞—á—å—Ç–µ –Ω–∞—à —Ç–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç Telethon <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –∫–∞–Ω–∞–ª–∞, –∏–Ω–∞—á–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫/–æ—Ç–ø–∏—Å–æ–∫ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            parse_mode="HTML",
            reply_markup=channel_actions_kb(ch_id),
        )
    except Exception:
        logger.exception("Immediate collect failed for channel %s", tg_chat_id)
        await message.answer(
            f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {title or username or tg_chat_id}\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–∑—É —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å–º. –ª–æ–≥–∏).\n"
            "‚ö†Ô∏è –ù–∞–∑–Ω–∞—á—å—Ç–µ –Ω–∞—à —Ç–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç Telethon <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            parse_mode="HTML",
            reply_markup=channel_actions_kb(ch_id),
        )


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def list_channels(message: Message) -> None:
    with session_scope() as s:
        rows = (
            s.query(Channel.id, Channel.title, Channel.username, Channel.tg_chat_id, Channel.is_active)
            .order_by(Channel.id.desc())
            .limit(20)
            .all()
        )
    if not rows:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ‚Äò–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚Äô.")
        return
    for ch_id, title, username, tg_chat_id, is_active in rows:
        text = f"{title or username or tg_chat_id} ‚Äî {'–∞–∫—Ç–∏–≤–µ–Ω' if is_active else '–Ω–∞ –ø–∞—É–∑–µ'}"
        await message.answer(text, reply_markup=channel_actions_kb(ch_id))


# Inline callbacks from start inline menu
@router.callback_query(F.data == "channels:add")
async def inline_add_channel(cb: CallbackQuery) -> None:
    await cb.message.answer(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n"
        "–ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ —Ç–µ—Ö. –∞–∫–∫–∞—É–Ω—Ç–∞ (Telethon session) –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏).",
        parse_mode="HTML",
    )
    await cb.answer()


@router.callback_query(F.data == "channels:list")
async def inline_list_channels(cb: CallbackQuery) -> None:
    with session_scope() as s:
        rows = (
            s.query(Channel.id, Channel.title, Channel.username, Channel.tg_chat_id, Channel.is_active)
            .order_by(Channel.id.desc())
            .limit(20)
            .all()
        )
    if not rows:
        await cb.message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ‚Äò–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚Äô.")
        await cb.answer()
        return
    for ch_id, title, username, tg_chat_id, is_active in rows:
        text = f"{title or username or tg_chat_id} ‚Äî {'–∞–∫—Ç–∏–≤–µ–Ω' if is_active else '–Ω–∞ –ø–∞—É–∑–µ'}"
        await cb.message.answer(text, reply_markup=channel_actions_kb(ch_id))
    await cb.answer()


@router.callback_query(F.data == "channels:menu")
async def inline_main_menu(cb: CallbackQuery) -> None:
    await cb.message.edit_text(
        (
            "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø –ø–æ–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ö–≤–∞—Ç—ã.\n\n"
            "<b>‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b>\n"
            "‚Ä¢ <b>/in</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ (—Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n"
            "‚Ä¢ <b>/out</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ (—Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n\n"
            "<b>üß≠ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π</b>\n"
            "‚Ä¢ <b>/add</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—à–∞–≥–æ–≤–æ\n"
            "‚Ä¢ <b>/cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ <b>/help</b> ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>üì¢ –ö–∞–Ω–∞–ª—ã</b>\n"
            "‚Ä¢ <b>/channels</b> ‚Äî –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "‚Ä¢ <b>/collect_now</b> ‚Äî —Å–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ–π—á–∞—Å\n"
            "‚Ä¢ <b>/stats</b> ‚Äî –æ—Ö–≤–∞—Ç—ã –∑–∞ 24/48/72—á, —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ ER\n\n"
            "<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏</b>\n"
            "‚Ä¢ –ù–∞ —à–∞–≥–µ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä.\n"
            "‚Ä¢ –°—É–º–º—É –≤–≤–æ–¥–∏—Ç–µ —Å –∫–æ–ø–µ–π–∫–∞–º–∏ (–Ω–∞–ø—Ä.: 1200.50 –∏–ª–∏ 1 200,50).\n"
            "‚Ä¢ –í –∫–æ–Ω—Ü–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        ),
        reply_markup=channels_inline_menu_kb(),
        parse_mode="HTML",
    )
    await cb.answer()


@router.callback_query(F.data.startswith("ch_toggle:"))
async def toggle_channel(cb: CallbackQuery) -> None:
    channel_id = int(cb.data.split(":", 1)[1])
    with session_scope() as s:
        ch = s.query(Channel).filter(Channel.id == channel_id).one_or_none()
        if not ch:
            await cb.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        ch.is_active = not ch.is_active
        s.flush()
        await cb.answer("–ì–æ—Ç–æ–≤–æ")
        await cb.message.edit_text(
            f"{ch.title or ch.username or ch.tg_chat_id} ‚Äî {'–∞–∫—Ç–∏–≤–µ–Ω' if ch.is_active else '–Ω–∞ –ø–∞—É–∑–µ'}"
        )


@router.callback_query(F.data.startswith("ch_delete:"))
async def delete_channel(cb: CallbackQuery) -> None:
    channel_id = int(cb.data.split(":", 1)[1])
    with session_scope() as s:
        ch = s.query(Channel).filter(Channel.id == channel_id).one_or_none()
        if not ch:
            await cb.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        ch.is_active = False
        ch.last_error = "deleted_by_user"
        s.flush()
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
    await cb.message.edit_text("–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


