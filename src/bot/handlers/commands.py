from __future__ import annotations

import logging
import os
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from bot.keyboards.channels import channels_inline_menu_kb
from bot.keyboards.common import options_menu_kb
from bot.db.models import User
from bot.services.time import now_msk
from bot.services.channel_stats import collect_daily_for_all_channels
from bot.db.base import session_scope
from bot.db.models import Channel, ChannelDailySnapshot, PostSnapshot, ChannelDailyChurn
from sqlalchemy import func
from bot.services.alerts import build_stats_report_text
from datetime import timedelta, timezone
 
logger = logging.getLogger()
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    await message.answer(
        (
            "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø –ø–æ–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ö–≤–∞—Ç—ã.\n\n"
            "<b>‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b>\n"
            "‚Ä¢ <b>/in</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ (—Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n"
            "‚Ä¢ <b>/out</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ (—Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n\n"
            "<b>üß≠ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π</b>\n"
            "‚Ä¢ <b>/add</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—à–∞–≥–æ–≤–æ\n"
            "‚Ä¢ <b>/cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ <b>/help</b> ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>üì¢ –ö–∞–Ω–∞–ª—ã</b>\n"
            "‚Ä¢ <b>/channels</b> ‚Äî –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "‚Ä¢ <b>/collect_now</b> ‚Äî —Å–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ–π—á–∞—Å\n"
            "‚Ä¢ <b>/stats</b> ‚Äî –æ—Ö–≤–∞—Ç—ã –∑–∞ 24/48/72—á, —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ ER\n\n"
            "<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏</b>\n"
            "‚Ä¢ –ù–∞ —à–∞–≥–µ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä.\n"
            "‚Ä¢ –°—É–º–º—É –≤–≤–æ–¥–∏—Ç–µ —Å –∫–æ–ø–µ–π–∫–∞–º–∏ (–Ω–∞–ø—Ä.: 1200.50 –∏–ª–∏ 1 200,50).\n"
            "‚Ä¢ –í –∫–æ–Ω—Ü–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        ),
        reply_markup=channels_inline_menu_kb(),
        parse_mode="HTML",
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    await message.answer(
        "–®–∞–≥–∏: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Üí –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –æ–±—â–∞—è ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí —Å—É–º–º–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@router.callback_query(lambda c: c.data == "options:menu")
async def options_menu(cb):
    uid = cb.from_user.id if cb.from_user else None
    if uid is None:
        await cb.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
        return
    with session_scope() as s:
        user = s.query(User).filter(User.tg_user_id == uid).one_or_none()
        notify = bool(getattr(user, "notify_daily_stats", False)) if user else False
    await cb.message.edit_text("–û–ø—Ü–∏–∏:", reply_markup=options_menu_kb(notify_on=notify))
    await cb.answer()


@router.callback_query(lambda c: c.data == "options:toggle_notify")
async def options_toggle_notify(cb):
    uid = cb.from_user.id if cb.from_user else None
    if uid is None:
        await cb.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
        return
    with session_scope() as s:
        user = s.query(User).filter(User.tg_user_id == uid).one_or_none()
        if user is None:
            await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user.notify_daily_stats = not bool(user.notify_daily_stats)
        s.flush()
        new_state = bool(user.notify_daily_stats)
    await cb.message.edit_reply_markup(reply_markup=options_menu_kb(notify_on=new_state))
    await cb.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: " + ("–≤–∫–ª—é—á–µ–Ω–æ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–æ"))


@router.message(Command("cancel"))
async def cmd_cancel(message: Message) -> None:
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@router.message(Command("collect_now"))
async def cmd_collect_now(message: Message) -> None:
    await message.answer("–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    try:
        res = await collect_daily_for_all_channels(now_msk())
        await message.answer(
            "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
            f"–ö–∞–Ω–∞–ª–æ–≤: {res['channels']}\n"
            f"–î–Ω–µ–π: +{res['daily_inserted']}/~{res['daily_updated']}\n"
            f"–ü–æ—Å—Ç–æ–≤: +{res['posts_inserted']}/~{res['posts_updated']}"
        )
    except Exception as exc:
        logger.exception("collect_now failed: %s", exc)
        echo = os.environ.get("ECHO_ERRORS_TO_USER", "0").strip() in ("1", "true", "True")
        if echo:
            await message.answer(f"–û—à–∏–±–∫–∞: {type(exc).__name__}: {exc}")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–º. –ª–æ–≥–∏.")


@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    text = await build_stats_report_text()
    await message.answer(text, parse_mode="HTML")



