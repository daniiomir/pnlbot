from __future__ import annotations

import logging
import os
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from bot.keyboards.channels import channels_inline_menu_kb
from bot.keyboards.common import options_menu_kb
from bot.db.models import User
from bot.services.time import now_msk
from bot.services.channel_stats import collect_daily_for_all_channels
from bot.db.base import session_scope
from bot.db.models import Channel
from sqlalchemy import func
from bot.services.alerts import build_stats_report_text
from datetime import timedelta
from bot.types.enums import OperationType
from bot.db.models import Operation, OperationChannel
 
logger = logging.getLogger()
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    await message.answer(
        (
            "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø –ø–æ–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ö–≤–∞—Ç—ã.\n\n"
            "<b>‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b>\n"
            "‚Ä¢ <b>/in</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ (—Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n"
            "‚Ä¢ <b>/out</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ (—Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n"
            "‚Ä¢ <b>/invest</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (—Å—Ä–∞–∑—É –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)\n\n"
            "<b>üß≠ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π</b>\n"
            "‚Ä¢ <b>/add</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—à–∞–≥–æ–≤–æ\n"
            "‚Ä¢ <b>/cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
            "‚Ä¢ <b>/help</b> ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>üì¢ –ö–∞–Ω–∞–ª—ã</b>\n"
            "‚Ä¢ <b>/channels</b> ‚Äî –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "‚Ä¢ <b>/stats</b> ‚Äî –æ—Ö–≤–∞—Ç—ã –∑–∞ 24/48/72—á, —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∏ ER\n\n"
            "<b>üíµ –§–∏–Ω–∞–Ω—Å—ã</b>\n"
            "‚Ä¢ <b>/cashflow</b> ‚Äî –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü, CPS (—Å –≤—ã—á–µ—Ç–æ–º –æ—Ç–ø–∏—Å–æ–∫)\n\n"
            "<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏</b>\n"
            "‚Ä¢ –ù–∞ —à–∞–≥–µ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä.\n"
            "‚Ä¢ –°—É–º–º—É –≤–≤–æ–¥–∏—Ç–µ —Å –∫–æ–ø–µ–π–∫–∞–º–∏ (–Ω–∞–ø—Ä.: 1200.50 –∏–ª–∏ 1 200,50).\n"
            "‚Ä¢ –í –∫–æ–Ω—Ü–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
        ),
        reply_markup=channels_inline_menu_kb(),
        parse_mode="HTML",
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    await message.answer(
        "–®–∞–≥–∏: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Üí –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –æ–±—â–∞—è ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí —Å—É–º–º–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@router.callback_query(lambda c: c.data == "options:menu")
async def options_menu(cb):
    uid = cb.from_user.id if cb.from_user else None
    if uid is None:
        await cb.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
        return
    with session_scope() as s:
        user = s.query(User).filter(User.tg_user_id == uid).one_or_none()
        notify = bool(getattr(user, "notify_daily_stats", False)) if user else False
    await cb.message.edit_text("–û–ø—Ü–∏–∏:", reply_markup=options_menu_kb(notify_on=notify))
    await cb.answer()


@router.callback_query(lambda c: c.data == "options:toggle_notify")
async def options_toggle_notify(cb):
    uid = cb.from_user.id if cb.from_user else None
    if uid is None:
        await cb.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
        return
    with session_scope() as s:
        user = s.query(User).filter(User.tg_user_id == uid).one_or_none()
        if user is None:
            await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user.notify_daily_stats = not bool(user.notify_daily_stats)
        s.flush()
        new_state = bool(user.notify_daily_stats)
    await cb.message.edit_reply_markup(reply_markup=options_menu_kb(notify_on=new_state))
    await cb.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: " + ("–≤–∫–ª—é—á–µ–Ω–æ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–æ"))


@router.message(Command("cancel"))
async def cmd_cancel(message: Message) -> None:
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@router.message(Command("collect_now"))
async def cmd_collect_now(message: Message) -> None:
    await message.answer("–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    try:
        res = await collect_daily_for_all_channels(now_msk())
        await message.answer(
            "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
            f"–ö–∞–Ω–∞–ª–æ–≤: {res['channels']}\n"
            f"–î–Ω–µ–π: +{res['daily_inserted']}/~{res['daily_updated']}\n"
            f"–ü–æ—Å—Ç–æ–≤: +{res['posts_inserted']}/~{res['posts_updated']}"
        )
    except Exception as exc:
        logger.exception("collect_now failed: %s", exc)
        echo = os.environ.get("ECHO_ERRORS_TO_USER", "0").strip() in ("1", "true", "True")
        if echo:
            await message.answer(f"–û—à–∏–±–∫–∞: {type(exc).__name__}: {exc}")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–º. –ª–æ–≥–∏.")


@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    text = await build_stats_report_text()
    await message.answer(text, parse_mode="HTML")



@router.message(Command("cashflow"))
async def cmd_cashflow(message: Message) -> None:
    now_local = now_msk()
    # Week: Mon 00:00 ‚Äî next Mon 00:00 (MSK)
    week_start = (now_local - timedelta(days=(now_local.weekday()))).replace(hour=0, minute=0, second=0, microsecond=0)
    week_end = (week_start + timedelta(days=7)).replace(hour=0, minute=0, second=0, microsecond=0)
    # Month: first day 00:00 ‚Äî first day of next month 00:00 (MSK)
    month_start = now_local.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    month_next = (month_start + timedelta(days=32)).replace(day=1, hour=0, minute=0, second=0, microsecond=0)

    def fmt_money(kop: int) -> str:
        total_kop = int(kop)
        rub_abs = abs(total_kop) // 100
        cnt_abs = abs(total_kop) % 100
        sign = "" if total_kop >= 0 else "-"
        return f"{sign}{rub_abs:,}.{cnt_abs:02d} ‚ÇΩ".replace(",", " ")

    def _sum_ops_amount_kop(s, ch_ids: list[int], *, op_type: int | None = None, category_id: int | None = None, start=None, end=None) -> int:
        # Sum for channel-linked operations (deduplicated by operation)
        base = (
            s.query(
                Operation.id.label("op_id"),
                func.max(Operation.amount_kop).label("amt"),
            )
            .join(OperationChannel, OperationChannel.c.operation_id == Operation.id)
            .filter(
                Operation.is_general.is_(False),
                OperationChannel.c.channel_id.in_(ch_ids),
            )
        )
        if start is not None and end is not None:
            base = base.filter(Operation.created_at >= start, Operation.created_at < end)
        if op_type is not None:
            base = base.filter(Operation.op_type == op_type)
        if category_id is not None:
            base = base.filter(Operation.category_id == category_id)
        sub = base.group_by(Operation.id).subquery()
        ch_total = s.query(func.coalesce(func.sum(sub.c.amt), 0)).scalar() or 0

        # Sum for general operations (not linked to channels)
        gen_q = s.query(func.coalesce(func.sum(Operation.amount_kop), 0)).filter(
            Operation.is_general.is_(True),
        )
        if start is not None and end is not None:
            gen_q = gen_q.filter(Operation.created_at >= start, Operation.created_at < end)
        if op_type is not None:
            gen_q = gen_q.filter(Operation.op_type == op_type)
        if category_id is not None:
            gen_q = gen_q.filter(Operation.category_id == category_id)
        gen_total = gen_q.scalar() or 0

        return int(ch_total or 0) + int(gen_total or 0)

    def build_period(fin_start, fin_end, header: str) -> str:
        with session_scope() as s:
            channels = (
                s.query(Channel)
                .filter(Channel.is_active.is_(True))
                .order_by(Channel.created_at.desc())
                .all()
            )
            if not channels:
                return f"<b>{header}</b>\n–ö–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç."
            ch_ids = [c.id for c in channels]

            income_kop = _sum_ops_amount_kop(s, ch_ids, op_type=OperationType.INCOME.value, start=fin_start, end=fin_end)
            expense_kop = _sum_ops_amount_kop(s, ch_ids, op_type=OperationType.EXPENSE.value, start=fin_start, end=fin_end)

            personal_invest_kop = int(_sum_ops_amount_kop(s, ch_ids, op_type=OperationType.PERSONAL_INVEST.value, start=fin_start, end=fin_end) or 0)

            op_expense_kop = int(expense_kop)
            profit_kop = int(income_kop) - int(op_expense_kop)

            lines: list[str] = []
            lines.append(f"<b>{header}</b>")
            lines.append(f"–í–ª–æ–∂–µ–Ω–∏—è: {fmt_money(int(personal_invest_kop))}")
            lines.append(f"–†–∞—Å—Ö–æ–¥—ã: {fmt_money(int(op_expense_kop))}")
            lines.append(f"–î–æ—Ö–æ–¥—ã: {fmt_money(int(income_kop))}")
            lines.append(f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {fmt_money(int(profit_kop))}")
            return "\n".join(lines)

    def build_overall() -> str:
        with session_scope() as s:
            channels = (
                s.query(Channel)
                .filter(Channel.is_active.is_(True))
                .order_by(Channel.created_at.desc())
                .all()
            )
            if not channels:
                return "<b>–û–ë–©–ï–ï</b>\n–ö–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç."
            ch_ids = [c.id for c in channels]

            income_all = _sum_ops_amount_kop(s, ch_ids, op_type=OperationType.INCOME.value)
            expense_all = _sum_ops_amount_kop(s, ch_ids, op_type=OperationType.EXPENSE.value)

            personal_invest_all = int(_sum_ops_amount_kop(s, ch_ids, op_type=OperationType.PERSONAL_INVEST.value) or 0)

            op_expense_all = int(expense_all)

            cash_left = int(personal_invest_all) - int(op_expense_all)
            net_profit = int(income_all) - int(op_expense_all)
            cash_with_income = int(personal_invest_all) + int(income_all) - int(op_expense_all)

            lines: list[str] = []
            lines.append("<b>–û–ë–©–ï–ï</b>")
            lines.append(f"–í–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ: {fmt_money(int(personal_invest_all))}")
            lines.append(f"–†–∞—Å—Ö–æ–¥—ã –≤—Å–µ–≥–æ: {fmt_money(int(op_expense_all))}")
            lines.append(f"–î–æ—Ö–æ–¥—ã –≤—Å–µ–≥–æ: {fmt_money(int(income_all))}")
            lines.append(f"–û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤: {fmt_money(int(cash_left))}")
            lines.append(f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {fmt_money(int(net_profit))}")
            lines.append(f"–û—Å—Ç–∞—Ç–æ–∫ —Å —É—á—ë—Ç–æ–º –¥–æ—Ö–æ–¥–æ–≤: {fmt_money(int(cash_with_income))}")
            return "\n".join(lines)

    def _fmt_date(d) -> str:
        try:
            return d.strftime("%d.%m.%Y")
        except Exception:
            return str(d)

    week_label = f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ({_fmt_date(week_start.date())}‚Äì{_fmt_date((week_end - timedelta(days=1)).date())})"
    month_label = f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({_fmt_date(month_start.date())}‚Äì{_fmt_date((month_next - timedelta(days=1)).date())})"

    overall_block = build_overall()
    month_block = build_period(month_start, month_next, month_label)
    week_block = build_period(week_start, week_end, week_label)

    await message.answer(
        f"{overall_block}\n\n{month_block}\n\n{week_block}",
        parse_mode="HTML",
    )


@router.callback_query(lambda c: c.data == "cashflow:how")
async def cashflow_how(cb):
    text = (
        "<b>–ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è Cashflow</b>\n\n"
        "<b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏ –ø–µ—Ä–∏–æ–¥–∞</b>\n"
        "‚Ä¢ –î–æ—Ö–æ–¥ = —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.\n"
        "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã (–±–µ–∑ –ª–∏—á–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π) = –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã ‚àí –ª–∏—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è.\n"
        "‚Ä¢ –õ–∏—á–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è = —Å—É–º–º–∞ –ª–∏—á–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞.\n"
        "‚Ä¢ –ú–∞—Ä–∂–∞ = –î–æ—Ö–æ–¥ ‚àí –†–∞—Å—Ö–æ–¥—ã (–±–µ–∑ –ª–∏—á–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π).\n"
        "‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å = (–ú–∞—Ä–∂–∞ / –î–æ—Ö–æ–¥) √ó 100%.\n\n"
        "<b>–†–µ–∫–ª–∞–º–∞ –∏ CPS</b>\n"
        "‚Ä¢ –ó–∞–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã = —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É.\n"
        "‚Ä¢ –í—Å—Ç—É–ø–ª–µ–Ω–∏—è/–û—Ç–ø–∏—Å–∫–∏ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ / –æ—Ç–ø–∏—Å–æ–∫.\n"
        "‚Ä¢ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç = –í—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚àí –û—Ç–ø–∏—Å–∫–∏.\n"
        "‚Ä¢ CPS (—Ä–∞—Å—Ö–æ–¥ –Ω–∞ 1 —á–∏—Å—Ç–æ–≥–æ) = –ó–∞–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã / –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç (–µ—Å–ª–∏ > 0).\n\n"
        "<b>–î–æ–ø. –º–µ—Ç—Ä–∏–∫–∏</b>\n"
        "‚Ä¢ –î–æ—Ö–æ–¥/–ø–æ—Å—Ç = –î–æ—Ö–æ–¥ / —á–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.\n"
        "‚Ä¢ –†–∞—Å—Ö–æ–¥/–ø–æ—Å—Ç = –†–∞—Å—Ö–æ–¥—ã (–±–µ–∑ –ª–∏—á–Ω—ã—Ö) / —á–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤.\n"
        "‚Ä¢ RPM = –î–æ—Ö–æ–¥ / (–ü—Ä–æ—Å–º–æ—Ç—Ä—ã / 1000).\n"
        "‚Ä¢ CPM = –†–∞—Å—Ö–æ–¥—ã (–±–µ–∑ –ª–∏—á–Ω—ã—Ö) / (–ü—Ä–æ—Å–º–æ—Ç—Ä—ã / 1000).\n"
        "‚Ä¢ ARPU = –î–æ—Ö–æ–¥ / –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.\n"
        "‚Ä¢ ROMI = –î–æ—Ö–æ–¥ / –ó–∞–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã.\n\n"
        "<b>–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞</b>\n"
        "‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏ –æ–±—â–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—è/–º–µ—Å—è—Ü ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (MSK).\n\n"
        "<b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
        "‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: –≤—Å–µ –¥–æ—Ö–æ–¥—ã ‚àí –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã."
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:menu")]
        ]
    )
    await cb.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()


@router.callback_query(lambda c: c.data == "main:menu")
async def main_menu_cb(cb):
    await cb.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=channels_inline_menu_kb())
    await cb.answer()


